// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IdFramework
import CommonCrypto
import CryptoKit
import Foundation
@_exported import IdFramework
import LocalAuthentication
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum IDError : Swift.Error {
  case failedInCapture
  case captureCancelledByUser
  case failedInEncryption
  case failedInDecryption
  case failedInStoringPhotos
  case failedInRetrievingPhotos
  case invalidData
  case notAuthorized
  case biometryPermissionDenied
  case noIdentitiesEnrolled
  case failedInRetrievalOfKey
  case noStoredPhoto
  public var description: Swift.String {
    get
  }
  public static func == (a: IdFramework.IDError, b: IdFramework.IDError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class IdVerification {
  public init()
  final public func takePhoto(_ viewController: UIKit.UIViewController, completion: @escaping (Swift.Result<Swift.Void, IdFramework.IDError>) -> Swift.Void)
  final public func authenticateUser(completion: @escaping (Swift.Result<Swift.Void, IdFramework.IDError>) -> Swift.Void)
  final public func accessPhotos(completion: @escaping (Swift.Result<[UIKit.UIImage], IdFramework.IDError>) -> Swift.Void)
  @objc deinit
}
extension IdFramework.IDError : Swift.Equatable {}
extension IdFramework.IDError : Swift.Hashable {}
